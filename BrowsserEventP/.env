


Perfect 🔥 Let’s make a **mini coding challenge set** on browser events. I’ll give you:

* The **problem statement** (like in interviews)
* The **solution code** (clean & simple)
* The **concept tested**

---

# 🧩 Browser Events Mini Coding Challenges

---

## 1️⃣ Build a Custom Dropdown

**❓ Problem:**
Create a dropdown menu. When the user clicks a button, a list of options appears. When an option is clicked, show its value in the button.

**✅ Solution:**

```html
<button id="dropdownBtn">Select Option ⬇</button>
<ul id="dropdownMenu" style="display:none; border:1px solid #aaa; width:150px; padding:5px;">
  <li>Option 1</li>
  <li>Option 2</li>
  <li>Option 3</li>
</ul>

<script>
const btn = document.getElementById("dropdownBtn");
const menu = document.getElementById("dropdownMenu");

btn.addEventListener("click", () => {
  menu.style.display = menu.style.display === "none" ? "block" : "none";
});

menu.addEventListener("click", (e) => {
  if (e.target.tagName === "LI") {
    btn.textContent = e.target.textContent + " ⬇";
    menu.style.display = "none";
  }
});
</script>
```

**🎯 Concept Tested:** `click` event, event delegation, DOM manipulation.

---

## 2️⃣ Keyboard Shortcuts

**❓ Problem:**
Add keyboard shortcuts:

* Press **Ctrl + S** → show “Saving…”
* Press **Escape** → show “Cancelled”

**✅ Solution:**

```html
<p id="status"></p>

<script>
document.addEventListener("keydown", (e) => {
  if (e.ctrlKey && e.key === "s") {
    e.preventDefault();
    document.getElementById("status").textContent = "Saving...";
  }
  if (e.key === "Escape") {
    document.getElementById("status").textContent = "Cancelled";
  }
});
</script>
```

**🎯 Concept Tested:** `keydown`, `e.key`, `e.ctrlKey`, `preventDefault`.

---

## 3️⃣ Form Validation

**❓ Problem:**
Create a form with **username** and **password**. Prevent submission if username is empty or password < 6 chars.

**✅ Solution:**

```html
<form id="loginForm">
  <input type="text" id="username" placeholder="Username" />
  <input type="password" id="password" placeholder="Password" />
  <button type="submit">Login</button>
  <p id="error" style="color:red;"></p>
</form>

<script>
const form = document.getElementById("loginForm");
const errorMsg = document.getElementById("error");

form.addEventListener("submit", (e) => {
  e.preventDefault();
  
  const username = document.getElementById("username").value.trim();
  const password = document.getElementById("password").value;
  
  if (!username) {
    errorMsg.textContent = "Username is required!";
    return;
  }
  if (password.length < 6) {
    errorMsg.textContent = "Password must be at least 6 characters!";
    return;
  }
  
  errorMsg.textContent = "Form submitted successfully ✅";
});
</script>
```

**🎯 Concept Tested:** `submit` event, `preventDefault`, input validation.

---

## 4️⃣ Modal Popup with Close

**❓ Problem:**
Create a button that opens a modal popup. Close the modal when clicking the “X” button or pressing **Escape**.

**✅ Solution:**

```html
<button id="openModal">Open Modal</button>

<div id="modal" style="display:none; position:fixed; top:20%; left:30%; background:white; padding:20px; border:2px solid #000;">
  <span id="closeModal" style="cursor:pointer; color:red; font-weight:bold;">X</span>
  <p>Hello! This is a modal.</p>
</div>

<script>
const modal = document.getElementById("modal");
document.getElementById("openModal").addEventListener("click", () => {
  modal.style.display = "block";
});

document.getElementById("closeModal").addEventListener("click", () => {
  modal.style.display = "none";
});

document.addEventListener("keydown", (e) => {
  if (e.key === "Escape") modal.style.display = "none";
});
</script>
```

**🎯 Concept Tested:** multiple events, `keydown` + `click`.

---

## 5️⃣ Infinite Scroll Loader

**❓ Problem:**
Detect when the user scrolls to the bottom of the page and load new content dynamically.

**✅ Solution:**

```html
<div id="content"></div>

<script>
const content = document.getElementById("content");

// add initial items
for (let i = 1; i <= 10; i++) {
  content.innerHTML += `<p>Item ${i}</p>`;
}

let count = 11;
window.addEventListener("scroll", () => {
  if (window.innerHeight + window.scrollY >= document.body.offsetHeight) {
    // load more items
    for (let i = 0; i < 5; i++) {
      content.innerHTML += `<p>Item ${count++}</p>`;
    }
  }
});
</script>
```

**🎯 Concept Tested:** `scroll` event, dynamic DOM updates.

---

✅ With these **5 challenges**, you’ll be super confident in:

* Event binding (`addEventListener`)
* Event object usage (`target`, `key`, etc.)
* Preventing defaults
* Event delegation
* Real-world use cases (dropdowns, modals, forms, infinite scroll)

---

👉 Do you want me to **bundle these challenges into one mini “Interview Event Playground App”** (all features in one HTML/JS file), so you can practice like a real coding round?
